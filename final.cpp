/*
{}, {}, {}, {}, {}, {}, {}, {}, {}, {},
*/
#include<stdlib.h>
#include<stdio.h>
#include<time.h>
#include<math.h>
#include<GL/glut.h>      // (or others, depending on the system in use)
#include <windows.h>
#define PI 3.14159265358
const int sizeX=1600, sizeY=900;
float draginCat[295][2]={
				//start:0 外框 
					{ 836,900-782}, { 836,900-775}, { 839,900-768}, { 841,900-760}, { 845,900-754}, { 849,900-739}, { 854,900-733}, { 858,900-725}, { 861,900-719}, { 870,900-707},
					{ 875,900-696}, { 881,900-690}, { 884,900-683}, { 893,900-677}, { 896,900-669}, { 901,900-666}, { 906,900-662}, { 912,900-658}, { 922,900-652}, { 926,900-648},
					{ 931,900-641}, { 936,900-639}, { 943,900-633}, { 946,900-627}, { 949,900-622}, { 956,900-621}, { 964,900-611}, { 968,900-607}, { 969,900-599}, { 973,900-597},
					{ 984,900-595}, { 982,900-571}, { 983,900-547}, { 985,900-545}, { 988,900-534}, { 990,900-526}, { 997,900-519}, { 997,900-499}, {1042,900-486}, {1049,900-462},
					{1057,900-446}, {1069,900-425}, {1086,900-408}, {1095,900-398}, {1104,900-396}, {1112,900-388}, {1118,900-389}, {1121,900-393}, {1133,900-382}, {1140,900-378},
					{1153,900-376}, {1174,900-368}, {1187,900-362}, {1207,900-358}, {1218,900-357}, {1231,900-355}, {1244,900-354}, {1272,900-355}, {1274,900-341}, {1278,900-329},
					{1301,900-320}, {1300,900-285}, {1304,900-279}, {1302,900-201}, {1297,900-198}, {1292,900-200}, {1268,900-227}, {1255,900-250}, {1233,900-308}, {1246,900-319},
					{1242,900-338}, {1244,900-354}, {1272,900-355}, {1285,900-358}, {1300,900-361}, {1312,900-365}, {1322,900-368}, {1329,900-370}, {1338,900-376}, {1344,900-380},
					{1351,900-352}, {1334,900-329}, {1380,900-244}, {1396,900-221}, {1424,900-189}, {1431,900-187}, {1438,900-193}, {1441,900-281}, {1440,900-286}, {1433,900-358},
					{1427,900-363}, {1415,900-366}, {1395,900-369}, {1384,900-398}, {1434,900-427}, {1434,900-432}, {1454,900-447}, {1459,900-456}, {1490,900-510}, {1521,900-612},
					{1523,900-647}, {1534,900-662}, {1535,900-676}, {1544,900-692}, {1545,900-712}, {1553,900-732}, {1561,900-770}, {1562,900-797}, {1565,900-803}, {1564,900-823},
					
				//start:110 三角形左 
					{ 856,900-730}, { 859,900-735}, { 876,900-732}, { 891,900-751}, { 896,900-751}, { 899,900-744}, { 899,900-705}, { 896,900-701}, { 891,900-702}, { 868,900-712},
					
				//start:120 三角形中 
					{ 925,900-773}, { 946,900-757}, { 969,900-748}, { 974,900-748}, { 976,900-753}, { 982,900-781}, { 980,900-806}, { 974,900-808}, { 965,900-792}, { 957,900-780},
					{ 942,900-774}, { 925,900-773},
					
				//start:132 三角形右 
								  				    {1023,900-851}, {1026,900-846}, {1050,900-826}, {1060,900-823}, {1066,900-830}, {1071,900-853}, {1070,900-874}, {1065,900-876},
					{1049,900-856}, {1023,900-851},
					
				//start:142 肚子圓形 
												    { 943,900-634}, { 973,900-625}, { 987,900-626}, {1016,900-635}, {1064,900-668}, {1059,900-674}, {1073,900-682}, {1075,900-690},
					{1088,900-695}, {1088,900-702}, {1118,900-738}, {1120,900-756}, {1127,900-766}, {1128,900-779}, {1134,900-787}, {1137,900-794}, {1134,900-832}, {1134,900-841},
					
				//start:160 左鬍鬚下 
					{ 982,900-570}, { 977,900-571}, { 969,900-573},
					
				//start:163 左鬍鬚中 
																	{ 983,900-553}, { 967,900-554}, { 950,900-560},
				//start:166 左鬍鬚上 
																													{ 987,900-534}, { 970,900-533}, 
				//start:168 嘴巴 
																																					{1003,900-593}, { 994,900-592},
				//start:170 鼻孔
					{1005,900-516}, {1014,900-519},
				//start:172 鼻上
													{1007,900-498}, {1025,900-509}, {1026,900-518},
				//start:175 鼻上上
																									{1032,900-492}, {1034,900-498}, {1041,900-498}, {1041,900-501}, {1047,900-502},
					{1053,900-507},
				//start:181 右鬍鬚下
									{1115,900-615}, {1157,900-635}, {1203,900-662},
				//start:184 右鬍鬚中 
																					{1089,900-578}, {1167,900-599}, {1253,900-630},
				//start:187 右鬍鬚上
																																	{1124,900-568}, {1187,900-576}, {1254,900-592},
				//start:190 眼睛外圍
					{1107,900-506}, {1108,900-498}, {1110,900-492}, {1113,900-486}, {1116,900-479}, {1124,900-474}, {1133,900-470}, {1142,900-469}, {1153,900-471}, {1159,900-475},
					{1163,900-481}, {1166,900-491}, {1167,900-498}, {1167,900-503}, {1168,900-509}, {1171,900-511}, {1175,900-513}, {1169,900-513}, {1167,900-516}, {1163,900-521},
					{1157,900-526}, {1149,900-531}, {1141,900-532}, {1132,900-532}, {1125,900-531}, {1117,900-526}, {1113,900-521}, {1110,900-515}, {1109,900-508}, {1106,900-503},
					
				//start:220 眼睛 
					{1117,900-500}, {1118,900-495}, {1123,900-492}, {1128,900-491}, {1130,900-495}, {1132,900-501}, {1131,900-505}, {1127,900-510}, {1121,900-511}, {1118,900-507},
					{1117,900-500},
					
				//start:231 小龍貓框
									{1114,900-391}, {1106,900-379}, {1106,900-350}, {1107,900-345}, {1106,900-323}, {1108,900-315}, {1110,900-309}, {1119,900-298}, {1117,900-277},
					{1119,900-244}, {1121,900-239}, {1125,900-241}, {1134,900-262}, {1131,900-276}, {1130,900-294}, {1131,900-276}, {1134,900-262}, {1141,900-235}, {1144,900-231},
					{1148,900-235}, {1155,900-258}, {1157,900-279}, {1160,900-283}, {1163,900-288}, {1173,900-291}, {1179,900-297}, {1185,900-315}, {1198,900-331}, {1205,900-344},
					{1213,900-347}, {1216,900-357},
					
				//start:262 小龍貓眼睛左 
													{1108,900-321}, {1111,900-318}, {1115,900-317}, {1118,900-322}, {1116,900-323}, {1114,900-324}, {1113,900-323}, {1113,900-320},
					{1115,900-319}, {1117,900-318}, {1117,900-327}, {1116,900-332}, {1113,900-335}, {1112,900-336}, {1108,900-334}, {1105,900-332},
					
				//start:278 小龍貓眼睛右 
																																					{1129,900-319}, {1130,900-320},
					{1130,900-323}, {1127,900-323}, {1125,900-322}, {1124,900-317}, {1127,900-315}, {1131,900-313}, {1134,900-313}, {1138,900-316}, {1139,900-320}, {1139,900-324},
					{1138,900-330}, {1133,900-334}, {1127,900-333}, {1124,900-328}, {1124,900-323}
					
				//start:295
					};

int startButton[8][2]={
					{ 190,900-383}, { 204,900-370}, { 686,900-370}, { 700,900-383}, { 700,900-477}, { 686,900-490}, { 204,900-490}, { 190,900-477}
					};
					
int quitButton[8][2]={
					{ 190,900-571}, { 204,900-558}, { 686,900-558}, { 700,900-571}, { 700,900-665}, { 686,900-678}, { 204,900-678}, { 190,900-665}
					};

int font[49][2]={
					/*   x 			 y
					S 265-325 	  295-365
					T 340-400 	  295-365
					A 415-475 	  295-365
					R 490-550 	  295-365
					T 565-625 	  295-365
					E 302.5-362.5 482-553
					X 377.5-437.5 482-553
					I 452.5-512.5 482-553
					T 527.5-587.5 482-553*/
				
				//start:0 S
					{ 325,900-395}, { 265,900-395}, { 265,900-430}, { 325,900-430}, { 325,900-465}, { 265,900-465},
				//start:6 T
					{ 340,900-395}, { 400,900-395}, { 370,900-395}, { 370,900-465},
				//start:10 A
					{ 415,900-465}, { 430,900-395}, { 460,900-395}, { 475,900-465}, { 467.5,900-430}, { 422.5,900-430},
				//start:16 R
					{ 490,900-465},	{ 490,900-395}, { 550,900-395}, { 550,900-430}, { 490,900-430}, { 520,900-430}, { 550,900-465},
				//start:23 T
					{ 565,900-395}, { 625,900-395}, { 595,900-395}, { 595,900-465},
				//start:27 E
					{362.5,900-582}, {302.5,900-582}, {302.5,900-618}, {362.5,900-618}, {302.5,900-618}, {302.5,900-653}, {362.5,900-653},
				//start:34 X
					{377.5,900-582}, {437.5,900-653}, {407.5,900-618}, {437.5,900-582}, {377.5,900-653}, 
				//start:39 I
					{452.5,900-582}, {512.5,900-582}, {482.5,900-582}, {482.5,900-653}, {452.5,900-653}, {512.5,900-653},
				//start:45 T
					{527.5,900-582}, {587.5,900-582}, {557.5,900-582}, {557.5,900-653}
				//start:49
				};


void init (void)
{    
	glClearColor (1.0, 1.0, 1.0, 0.0);  // Set display-window color to white.    
	glMatrixMode (GL_PROJECTION);       // Set projection parameters.    
	gluOrtho2D (0, sizeX, 0, sizeY);
}

void dragonCat ()
{
	glColor3f(0.996, 0.9607, 0.8941);
	glBegin(GL_POLYGON);
		glVertex2f(0, sizeY);
		glVertex2f(sizeX, sizeY);
		glVertex2f(sizeX, 0);
		glVertex2f(0, 0);
	glEnd();
	
	glLineWidth(2); 
	glEnable(GL_LINE_SMOOTH);
  	glColor3f(0.0196, 0.6196, 0.7921);
  	glBegin(GL_LINE_STRIP);
  		for(int i=0; i<110; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=110; i<120; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=120; i<132; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=132; i<142; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=142; i<160; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=160; i<163; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=163; i<166; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=166; i<168; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=168; i<170; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=170; i<172; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=172; i<175; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=175; i<181; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=181; i<184; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=184; i<187; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=187; i<190; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
  	
  	glBegin(GL_LINE_STRIP);
  		for(int i=190; i<220; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_POLYGON);
  		for(int i=220; i<231; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=231; i<262; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=262; i<278; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
  	
  	glBegin(GL_LINE_STRIP);
  		for(int i=278; i<295; i++)
  		{
  			glVertex2f(draginCat[i][0],draginCat[i][1]);
		}
	glEnd();
}

void button ()
{
	glColor3f(0.9960, 0.9098, 0.8275);
	
	glBegin(GL_POLYGON);
  		for(int i=0; i<8; i++)
  		{
  			glVertex2f(startButton[i][0],startButton[i][1]);
		}
	glEnd();
	
	glBegin(GL_POLYGON);
  		for(int i=0; i<8; i++)
  		{
  			glVertex2f(quitButton[i][0],quitButton[i][1]);
		}
	glEnd();
	
	
	glColor3f(0.75, 0.4, 0.02);
	glLineWidth(3); 
	glEnable(GL_LINE_SMOOTH);
	glBegin(GL_LINE_STRIP);
  		for(int i=0; i<6; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=6; i<10; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=10; i<16; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=16; i<23; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=23; i<27; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=27; i<34; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=34; i<39; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	
	glBegin(GL_LINE_STRIP);
  		for(int i=39; i<45; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
	glBegin(GL_LINE_STRIP);
  		for(int i=45; i<49; i++)
  		{
  			glVertex2f(font[i][0],font[i][1]);
		}
	glEnd();
}

float nowX=0, nowY=0;
void myMouse (int touch, int state, int x, int y)
{
	nowX=x*2;
	nowY=900-y;
    if(touch == GLUT_LEFT_BUTTON && state == GLUT_DOWN )
    {
    	glClear (GL_COLOR_BUFFER_BIT);
    	//click START
    	/*if(190<nowX && nowX<700 && 370<nowY && nowY<490)
    	{
		
    	}*/
		
		//click EXIT
    	if(190<nowX && nowX<700 && 558<nowY && nowY<678)
    	{
    		exit(0);
    	}
    }
}

void draw ()
{
	dragonCat();
	button();
	glFlush ( );
}

int main (int argc, char** argv)
{    

	glutInit (&argc, argv);                         // Initialize GLUT.    
	glutInitDisplayMode (GLUT_SINGLE | GLUT_RGBA);   // Set display mode.    
	glutInitWindowPosition (650, 100);   // Set top-left display-window position.    
	glutInitWindowSize (sizeX/2, sizeY/2);      // Set display-window size and height.    
	glutCreateWindow ("lalala"); // Create display window.    
	init ( );                            // Execute initialization procedure.    
	glutDisplayFunc (draw);       // Send graphics to display window.    
	//glutReshapeFunc(winReshapeFcn);
	glutMouseFunc(myMouse);
	glutMainLoop ( );                    // Display everything and wait.
}
